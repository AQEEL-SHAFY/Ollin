import 'dart:io';
import 'package:flutter/material.dart';
import 'package:ollin/add_contact.dart';
import 'package:ollin/entity/emergency_contact.dart';
import 'package:path_provider/path_provider.dart';

import 'package:path/path.dart';
import 'package:sqflite/sqflite.dart';
import 'package:sqflite/sqlite_api.dart';

import '../emergency_contact.dart';

class DatabaseHelper {
  static const _databaseName = 'EmergencyContact.db';
  static const _databaseVersion = 1;

  DatabaseHelper._();
  static final DatabaseHelper instance = DatabaseHelper._();

  Database _database;
  Future<Database> get Database async {
    if (_database != null) return _database;
    _database = await _initDatabase();
    return _database;
  }

  _initDatabase() async {
    Directory dataDirectory = await getApplicationDocumentsDirectory();
    String dbPath = join(dataDirectory.path, _databaseName);
    return await openDatabase(dbPath,
        version: _databaseVersion, onCreate: _onCreateDB);
  }

  _onCreateDB(Database db, int version) async {
    await db.execute('''
    CREATE TABLE ${EmergencyContact.tblContact}(
      ${EmergencyContact.colId} INTEGER PRIMARY KEY AUTOINCREMENT,
      ${EmergencyContact.colName} TEXT NOT NULL,
      ${EmergencyContact.colMobile} TEXT NOT NULL,
    )

    ''');
  }

  Future<int> insertContact(AddContact contact) async {
    Database db = await database;
    return await db.insert(
        EmergencyContact.tblContact, EmergencyContact.toMap());
  }

  Future<List> fetchContacts() async {
    Database db = await database;
    List<Map> EmergencyContact = db.query(EmergencyContact.tblContact);
    if (EmergencyContact.length == 0) {
      return [];
    } else {
      return EmergencyContact.map((e) => EmergencyContact.fromMap(e)).toList();
    }
  }
}
